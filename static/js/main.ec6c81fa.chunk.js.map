{"version":3,"sources":["contexts/InputsValueContext.js","components/Input.js","components/Inputs.js","App.js","hooks/useSelectOperation.js","hooks/useTotalSum.js","index.js"],"names":["InputsValuesConext","React","createContext","undefined","useInputsValueContext","useContext","InputsValueProvider","children","useState","id","value","inputValues","setInputValues","values","newValue","exist","newElement","parseInt","parseFloat","inputValuesCopy","forEach","element","push","clearValue","Provider","Input","props","class","setValue","useEffect","onChange","event","target","obj","className","Inputs","count","type","inputs","i","map","input","operations","name","active","App","selectedOperation","setSelectedOperation","availableOperations","setAvailableOperations","currentlyOperations","operator","useSelectOperation","setOperation","addedInputs","setAddedInput","operactionsRendered","operation","classes","onClick","inputsNumbers","useMemo","activeInputs","totalSum","setTotalSum","setActiveInputsCount","countTheSum","sum","Object","keys","length","Math","sqrt","abs","log10","toFixed","console","log","useTotalSum","refActiveInputs","refreshAndReturnSum","numbers","totalSumRefreshed","Fragment","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec6c81fa.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\r\n\r\nconst InputsValuesConext = React.createContext(undefined);\r\n\r\nexport const useInputsValueContext = () => {\r\n    return useContext(InputsValuesConext);\r\n}\r\n\r\nexport const InputsValueProvider = ({ children }) => {\r\n\r\n    const [inputValues, setInputValues] = useState(\r\n        [\r\n            {\r\n                id: 0,\r\n                value: 0\r\n            }\r\n        ]);\r\n\r\n    const newValue = ({ id, value }) => {\r\n        let exist = false;\r\n        const newElement = {\r\n            id: parseInt(id),\r\n            value: parseFloat(value)\r\n        }\r\n        let inputValuesCopy = inputValues;\r\n\r\n        inputValuesCopy.forEach(element => {\r\n            if (element.id == id) {\r\n                exist = true;\r\n                element.id = newElement.id;\r\n                element.value = newElement.value;\r\n            }\r\n        });\r\n\r\n        if (!exist) {\r\n            inputValuesCopy.push(newElement);\r\n        }\r\n        setInputValues([...inputValuesCopy]);\r\n    }\r\n\r\n    const clearValue = (id) => {\r\n        let inputValuesCopy = inputValues;\r\n        inputValuesCopy.forEach(element => {\r\n            if (element.id > id) {\r\n                element.value = 0;\r\n            }\r\n        });\r\n        setInputValues([...inputValuesCopy]);\r\n\r\n    }\r\n\r\n    const values = {\r\n        inputValues,\r\n        setInputValues,\r\n        newValue,\r\n        clearValue\r\n    }\r\n\r\n    return <InputsValuesConext.Provider value={values}>\r\n        {children};\r\n    </InputsValuesConext.Provider>\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { useInputsValueContext } from '../contexts/InputsValueContext'\r\n\r\nconst Input = (props) => {\r\n\r\n    const id = props.class;\r\n\r\n    const [value, setValue] = useState(\"\");\r\n    const { newValue, inputValues } = useInputsValueContext();\r\n\r\n    const changeInputHandler = (event) => {\r\n        let value = event.target.value;\r\n        setValue(value);\r\n\r\n        const obj = {\r\n            id: event.target.className,\r\n            value: value || 0\r\n        }\r\n        newValue(obj);\r\n    };\r\n\r\n    // Przypisanie wartosci \r\n    useEffect(() => {\r\n        let exist = false;\r\n        inputValues.forEach(element => {\r\n            if (element.id == id) {\r\n                exist = true;\r\n                setValue(element.value);\r\n            }\r\n\r\n        });\r\n        if (!exist) {\r\n            setValue(0)\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <input onChange={changeInputHandler} {...props} value={value} />\r\n    )\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport Input from './Input';\r\n\r\nconst Inputs = ({ count, type }) => {\r\n\r\n    let inputs = [];\r\n    for (let i = 0; i < count; i++) {\r\n        inputs[i] = {\r\n            id: i,\r\n            type: type,\r\n        }\r\n    }\r\n\r\n    const inputsRendered = inputs.map(input => <Input key={input.id} class={input.id} type={input.type} />);\r\n\r\n    return inputsRendered;\r\n}\r\n\r\nexport default Inputs;","import './App.css';\nimport React from 'react';\nimport { useSelectOperation, useTotalSum } from './hooks';\nimport { Inputs } from './components';\nimport { useInputsValueContext } from './contexts/InputsValueContext'\n\nimport { useMemo, useState } from 'react';\n\nconst operations = [\n  { id: 0, name: \"dodawanie\", active: true },\n  { id: 1, name: \"odejmowanie\", active: false },\n  { id: 2, name: \"mnoÅ¼enie\", active: false },\n  { id: 3, name: \"dzielenie\", active: false },\n  { id: 4, name: \"pierwiastek\", active: false },\n  { id: 5, name: \"wartosc bezwzgledna\", active: false },\n  { id: 6, name: \"logarytm naturalny\", active: false }\n]\n\nfunction App() {\n\n  const { clearValue } = useInputsValueContext();\n\n\n  const [setOperation, availableOperations, selectedOperation] = useSelectOperation({ operations });\n\n  const [addedInputs, setAddedInput] = useState(0);\n  const maxAddedInput = 4;\n\n  const operactionsRendered = availableOperations.map(operation => {\n    const classes = !operation.active ? \"box\" : \"box active\";\n    return (<div key={operation.id} className={classes} onClick={() => {\n      setOperation(operation)\n    }}>{operation.name}</div>\n    )\n  });\n\n  // Jesli zaznaczymy pierw, war. bez. lub log = 1 input. Reszty 2. \n  let inputsNumbers = useMemo(() => selectedOperation.id > 3 ? 1 : 2, [selectedOperation]);\n\n  const [totalSum, refActiveInputs, refreshAndReturnSum] = useTotalSum(inputsNumbers, selectedOperation);\n\n  let activeInputs = useMemo(() => {\n    refActiveInputs(inputsNumbers + addedInputs)\n\n    //aktualnianie ilosci inputow - czyszczenie zawartosci niepotrzebnych\n    // Od id wzwyz\n    let numbers = ((inputsNumbers + addedInputs) - 1);\n    console.log(\"numbers \" + numbers + \"inputs \" + inputsNumbers, \"added\" + addedInputs)\n    if (inputsNumbers != 1)\n      clearValue(numbers);\n    return inputsNumbers;\n  }, [addedInputs, inputsNumbers]);\n\n  const inputs = (\n    <Inputs count={inputsNumbers} type=\"number\" />\n  )\n\n  const totalSumRefreshed = useMemo(() => {\n    return refreshAndReturnSum();\n  }, [inputs])\n\n  return (\n    <div className=\"app\">\n      <div class=\"row\">\n        <div class=\"numbers\">\n          <h2>UzupeÅnij liczby, ktÃ³re potrzebne sÄ do obliczenia dziaÅania</h2>\n          {console.log(inputsNumbers)\n          }\n          {inputsNumbers == 1 ? (\n            inputs\n          ) : (\n              <React.Fragment>\n                <div class=\"buttons\">\n                  {(addedInputs >= 1) ?\n                    <button onClick={() => {\n                      setAddedInput(addedInputs - 1);\n                    }}>-1</button> : null\n                  }\n                  {(addedInputs != maxAddedInput) ? (\n                    <button onClick={() => {\n                      setAddedInput(addedInputs + 1);\n                    }}>+1</button>\n                  ) : null}\n                </div>\n                {activeInputs = inputsNumbers + addedInputs}\n                <Inputs count={activeInputs} type=\"number\" />\n              </React.Fragment>\n            )}\n        </div>\n        <div class=\"operators\">\n          {operactionsRendered}\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"result\">\n          <h2>Wynik dziaÅania jest rÃ³wny</h2>\n          <h3>{totalSumRefreshed}</h3>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\r\n\r\nexport default function useSelectOperation(props) {\r\n    const { operations } = props;\r\n\r\n    const [selectedOperation, setSelectedOperation] = useState({});\r\n    const [availableOperations, setAvailableOperations] = useState(operations);\r\n\r\n    function setOperation(operator) {\r\n        availableOperations.forEach(element => {\r\n            if (element.id == operator.id) {\r\n                setSelectedOperation(operator);\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        const currentlyOperations = availableOperations.map(element => {\r\n            element.id == selectedOperation.id ? element.active = true : element.active = false;\r\n\r\n            return {\r\n                ...element,\r\n            }\r\n        })\r\n        setAvailableOperations(currentlyOperations);\r\n    }, [selectedOperation]);\r\n\r\n    return [setOperation, availableOperations, selectedOperation];\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { useInputsValueContext } from '../contexts/InputsValueContext';\r\n\r\nexport default function useTotalSum(activeInputs, selectedOperation) {\r\n\r\n    const [totalSum, setTotalSum] = useState(0);\r\n    const [activeInputsCount, setActiveInputsCount] = useState(activeInputs);\r\n\r\n    const { inputValues } = useInputsValueContext();\r\n\r\n    console.log(inputValues);\r\n\r\n    function countTheSum() {\r\n        let sum = 0;\r\n        if (selectedOperation != null) {\r\n            for (let i = 0; i < Object.keys(inputValues).length; i++) {\r\n                switch (selectedOperation.name) {\r\n                    case \"dodawanie\":\r\n                        sum += inputValues[i].value\r\n                        break;\r\n                    case \"odejmowanie\":\r\n                        if (i == 0) sum = inputValues[i].value;\r\n                        else sum -= inputValues[i].value;\r\n                        break;\r\n                    case \"mnoÅ¼enie\":\r\n                        if (i == 0) sum = inputValues[i].value;\r\n                        else sum *= inputValues[i].value;\r\n                        break;\r\n                    case \"dzielenie\":\r\n                        if (i == 0) sum = inputValues[i].value;\r\n                        else sum /= inputValues[i].value;\r\n                        break;\r\n                    case \"pierwiastek\":\r\n                        sum = Math.sqrt(inputValues[0].value);\r\n                        break;\r\n                    case \"pierwiastek\":\r\n                        sum = Math.abs(inputValues[0].value);\r\n                        break;\r\n                    case \"logarytm naturalny\":\r\n                        sum = Math.log10(inputValues[0].value);\r\n                        break;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        return sum.toFixed(2);\r\n    }\r\n\r\n    const refActiveInputs = (value) => {\r\n        setActiveInputsCount(value)\r\n    }\r\n\r\n    const refreshAndReturnSum = () => {\r\n        return countTheSum();\r\n    }\r\n\r\n    useEffect(() => setTotalSum(countTheSum()),\r\n        [activeInputs, selectedOperation]);\r\n\r\n    return [totalSum, refActiveInputs, refreshAndReturnSum];\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { InputsValueProvider } from \"./contexts/InputsValueContext\";\n\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <InputsValueProvider>\n      <App />\n    </InputsValueProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}